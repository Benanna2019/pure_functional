/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WorkshopsIndexImport } from './routes/workshops.index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as WorkshopsWorkshopIdImport } from './routes/workshops.$workshopId'
import { Route as PostsPostImport } from './routes/posts/$post'
import { Route as WorkshopsWorkshopIdIndexImport } from './routes/workshops.$workshopId.index'
import { Route as WorkshopsWorkshopIdSectionIdImport } from './routes/workshops.$workshopId.$sectionId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WorkshopsIndexRoute = WorkshopsIndexImport.update({
  id: '/workshops/',
  path: '/workshops/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const WorkshopsWorkshopIdRoute = WorkshopsWorkshopIdImport.update({
  id: '/workshops/$workshopId',
  path: '/workshops/$workshopId',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostRoute = PostsPostImport.update({
  id: '/posts/$post',
  path: '/posts/$post',
  getParentRoute: () => rootRoute,
} as any)

const WorkshopsWorkshopIdIndexRoute = WorkshopsWorkshopIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkshopsWorkshopIdRoute,
} as any)

const WorkshopsWorkshopIdSectionIdRoute =
  WorkshopsWorkshopIdSectionIdImport.update({
    id: '/$sectionId',
    path: '/$sectionId',
    getParentRoute: () => WorkshopsWorkshopIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/$post': {
      id: '/posts/$post'
      path: '/posts/$post'
      fullPath: '/posts/$post'
      preLoaderRoute: typeof PostsPostImport
      parentRoute: typeof rootRoute
    }
    '/workshops/$workshopId': {
      id: '/workshops/$workshopId'
      path: '/workshops/$workshopId'
      fullPath: '/workshops/$workshopId'
      preLoaderRoute: typeof WorkshopsWorkshopIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/workshops/': {
      id: '/workshops/'
      path: '/workshops'
      fullPath: '/workshops'
      preLoaderRoute: typeof WorkshopsIndexImport
      parentRoute: typeof rootRoute
    }
    '/workshops/$workshopId/$sectionId': {
      id: '/workshops/$workshopId/$sectionId'
      path: '/$sectionId'
      fullPath: '/workshops/$workshopId/$sectionId'
      preLoaderRoute: typeof WorkshopsWorkshopIdSectionIdImport
      parentRoute: typeof WorkshopsWorkshopIdImport
    }
    '/workshops/$workshopId/': {
      id: '/workshops/$workshopId/'
      path: '/'
      fullPath: '/workshops/$workshopId/'
      preLoaderRoute: typeof WorkshopsWorkshopIdIndexImport
      parentRoute: typeof WorkshopsWorkshopIdImport
    }
  }
}

// Create and export the route tree

interface WorkshopsWorkshopIdRouteChildren {
  WorkshopsWorkshopIdSectionIdRoute: typeof WorkshopsWorkshopIdSectionIdRoute
  WorkshopsWorkshopIdIndexRoute: typeof WorkshopsWorkshopIdIndexRoute
}

const WorkshopsWorkshopIdRouteChildren: WorkshopsWorkshopIdRouteChildren = {
  WorkshopsWorkshopIdSectionIdRoute: WorkshopsWorkshopIdSectionIdRoute,
  WorkshopsWorkshopIdIndexRoute: WorkshopsWorkshopIdIndexRoute,
}

const WorkshopsWorkshopIdRouteWithChildren =
  WorkshopsWorkshopIdRoute._addFileChildren(WorkshopsWorkshopIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts/$post': typeof PostsPostRoute
  '/workshops/$workshopId': typeof WorkshopsWorkshopIdRouteWithChildren
  '/posts': typeof PostsIndexRoute
  '/workshops': typeof WorkshopsIndexRoute
  '/workshops/$workshopId/$sectionId': typeof WorkshopsWorkshopIdSectionIdRoute
  '/workshops/$workshopId/': typeof WorkshopsWorkshopIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts/$post': typeof PostsPostRoute
  '/posts': typeof PostsIndexRoute
  '/workshops': typeof WorkshopsIndexRoute
  '/workshops/$workshopId/$sectionId': typeof WorkshopsWorkshopIdSectionIdRoute
  '/workshops/$workshopId': typeof WorkshopsWorkshopIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/posts/$post': typeof PostsPostRoute
  '/workshops/$workshopId': typeof WorkshopsWorkshopIdRouteWithChildren
  '/posts/': typeof PostsIndexRoute
  '/workshops/': typeof WorkshopsIndexRoute
  '/workshops/$workshopId/$sectionId': typeof WorkshopsWorkshopIdSectionIdRoute
  '/workshops/$workshopId/': typeof WorkshopsWorkshopIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts/$post'
    | '/workshops/$workshopId'
    | '/posts'
    | '/workshops'
    | '/workshops/$workshopId/$sectionId'
    | '/workshops/$workshopId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/posts/$post'
    | '/posts'
    | '/workshops'
    | '/workshops/$workshopId/$sectionId'
    | '/workshops/$workshopId'
  id:
    | '__root__'
    | '/'
    | '/posts/$post'
    | '/workshops/$workshopId'
    | '/posts/'
    | '/workshops/'
    | '/workshops/$workshopId/$sectionId'
    | '/workshops/$workshopId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsPostRoute: typeof PostsPostRoute
  WorkshopsWorkshopIdRoute: typeof WorkshopsWorkshopIdRouteWithChildren
  PostsIndexRoute: typeof PostsIndexRoute
  WorkshopsIndexRoute: typeof WorkshopsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsPostRoute: PostsPostRoute,
  WorkshopsWorkshopIdRoute: WorkshopsWorkshopIdRouteWithChildren,
  PostsIndexRoute: PostsIndexRoute,
  WorkshopsIndexRoute: WorkshopsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/posts/$post",
        "/workshops/$workshopId",
        "/posts/",
        "/workshops/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/posts/$post": {
      "filePath": "posts/$post.tsx"
    },
    "/workshops/$workshopId": {
      "filePath": "workshops.$workshopId.tsx",
      "children": [
        "/workshops/$workshopId/$sectionId",
        "/workshops/$workshopId/"
      ]
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/workshops/": {
      "filePath": "workshops.index.tsx"
    },
    "/workshops/$workshopId/$sectionId": {
      "filePath": "workshops.$workshopId.$sectionId.tsx",
      "parent": "/workshops/$workshopId"
    },
    "/workshops/$workshopId/": {
      "filePath": "workshops.$workshopId.index.tsx",
      "parent": "/workshops/$workshopId"
    }
  }
}
ROUTE_MANIFEST_END */
